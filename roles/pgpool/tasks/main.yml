---
# tasks file for pgpool
#
- name: "Copy aws-apitools-common to /root folder"
  copy:
    src: "{{ role_path }}/files/aws-apitools-common.sh"
    dest: "/root/aws-apitools-common.sh"
    force: yes
    mode: 0755
  become: true
  become_user: root

- name: "Copy vip_monitor.sh to /root folder"
  copy:
    src: "{{ role_path }}/files/vip_monitor.sh"
    dest: "/root/vip_monitor.sh"
    force: yes
    mode: 0755
  become: true
  become_user: root

- name: "Create /opt/aws/bin catalog"  
  file:
    path: /opt/aws/bin
    state: directory
    mode: 0750
  become: true
  become_user: root

- name: "Modify vip_monitor.sh" 
  lineinfile:
    dest: "/root/vip_monitor.sh"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
    state: present
  with_items:
    - { regexp: '^HA_Node_IP=', line: 'HA_Node_IP={{ ansible_default_ipv4.address }}' }
    - { regexp: '^VIP=', line: "VIP={{ vip_address }}" }
    - { regexp: '^REGION=', line: "REGION={{ aws_region }}" }
  become: true
  become_user: root

- name: "Create link ec2-describe-instances"
  file:
    src: /usr/bin/ec2-describe-instances
    dest: /opt/aws/bin/ec2-describe-instances
    state: link
  become: true
  become_user: root

- name: "Create link ec2-assign-private-ip-addresses"
  file:
    src: /usr/bin/ec2-assign-private-ip-addresses
    dest: /opt/aws/bin/ec2-assign-private-ip-addresses
    state: link
  become: true
  become_user: root

- name: "Update apt cache if needed"
  apt: 
    update_cache: yes 
    cache_valid_time: 3600
    force_apt_get: true
  become: true
  become_user: root

- name: "Install pgpool2 packages"
  apt:
    name: "{{ packages }}"
    force_apt_get: true
  vars:
    packages:
    - postgresql-{{ pg_ver }}-pgpool2
    - pgpool2
    - python-pip
    - python-pexpect
    - python-setuptools 
  become: true
  become_user: root

- name: "Disable the rot pool nodes status file"
  lineinfile:
    path: /lib/systemd/system/pgpool2.service
    regexp: '^ExecStart='
    line: ExecStart=/usr/sbin/pgpool -D -n -f /etc/pgpool2/pgpool.conf  
  become: true
  become_user: root

- name: "Suppress failed to bind a socket error by force delete socket file"
  lineinfile:
    path: /lib/systemd/system/pgpool2.service
    insertafter: '^ExecStart='
    line: ExecStop=/usr/sbin/pgpool -f /etc/pgpool2/pgpool.conf -m fast stop
  become: true
  become_user: root

- name: "Reload systemctl daemon"
  systemd:
    daemon_reload: yes
  become: true
  become_user: root

- name: "Copy template files to /etc/pgpool2"
  template:
    src: pgpool.conf.j2
    dest: /etc/pgpool2/pgpool.conf
    owner: "{{ pguser  }}"
    group: "{{ pggroup }}"
    mode: u=rwx,g=rwx,o=rx
  become: true
  become_user: root

- name: "Copy file failover.sh"
  copy:
    src: "{{ role_path }}/files/failover.sh" 
    dest: "/etc/pgpool2/failover.sh"
    owner: "{{ pguser }}"
    group: "{{ pggroup }}"
    mode: 0755
  become: true
  become_user: root

- name: "Copy file to /etc/pgpool2/pool_hba.conf"
  copy:
    src: pool_hba.conf
    dest: "/etc/pgpool2/pool_hba.conf"
    owner: "{{ pguser }}"
    group: "{{ pggroup }}"
  become: true
  become_user: root

- name: "Check pcp.conf existence"
  stat:
    path: /etc/pgpool2/pcp.conf
  register: pcp_conf_exists
  become: true
  become_user: root

- name: "Create file pcp.conf if not exist"
  file:
    path: /etc/pgpool2/pcp.conf
    state: touch
    owner: "{{ pguser }}"
    group: "{{ pggroup }}"
  when: not pcp_conf_exists.stat.exists
  become: true
  become_user: root

- name: "Generate md5 pass for pgpooler"
  command: "pg_md5 {{ pgpoolerpass }}"
  register: pgpuser_md5_password
  become: true
  become_user: "{{ pguser }}" 

- name: "Add a line in pcp.conf"
  lineinfile:
    path: /etc/pgpool2/pcp.conf
    line: "{{ pgpuser }}:{{ pgpuser_md5_password.stdout }}"
  become: true
  become_user: root

- name: "Check pool_passwd existence"
  stat:
    path: /etc/pgpool2/pool_passwd
  register: pool_passwd_conf_exists
  become: true
  become_user: root

- name: "Create file pool_passwd if not exist"
  file:
    path: /etc/pgpool2/pool_passwd
    state: touch
    owner: "{{ pguser }}"
    group: "{{ pggroup }}"
  become: true
  become_user: root
  when: not pool_passwd_conf_exists.stat.exists

  #- name: "Add pool passwd for pgpool user"
  #expect:
  #  command: "pg_md5 -m -f /etc/pgpool2/pgpool.conf -u {{ pgpuser }} -p"
  #  responses:
  #    password: "{{ pgpoolerpass }}"
  #  echo: yes
  #become: true
  #:become_user: root

- name: "Restart pgpool2"
  systemd:
    name: pgpool2.service
    state: restarted
    enabled: yes
    daemon_reload: yes
  become: true
  become_user: root
...

